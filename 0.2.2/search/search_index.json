{"config":{"lang":["en"],"separator":"[\\s\\-\\.]","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"jaxeffort","text":"<p>Welcome to the documentation for jaxeffort, a JAX-based emulator for galaxy power spectra with bias modeling and EFT corrections.</p>"},{"location":"#overview","title":"Overview","text":"<p>jaxeffort provides fast and differentiable emulation of galaxy power spectrum multipoles, enabling:</p> <ul> <li>Fast evaluation of galaxy power spectra multipoles (P\u2080, P\u2082, P\u2084)</li> <li>Automatic differentiation through JAX for gradient-based inference</li> <li>Bias modeling with EFT corrections</li> <li>GPU acceleration for large-scale analyses</li> </ul> <p></p>"},{"location":"#key-features","title":"Key Features","text":""},{"location":"#performance","title":"\ud83d\ude80 Performance","text":"<ul> <li>Orders of magnitude faster than traditional Boltzmann solvers + perturbation theory codes</li> <li>Fully JAX-compatible for automatic differentiation</li> <li>GPU-accelerated computations</li> </ul>"},{"location":"#accuracy","title":"\ud83c\udfaf Accuracy","text":"<ul> <li>Trained on high-precision PyBird calculations</li> <li>Sub-percent level accuracy across parameter space</li> <li>Validated against CLASS+PyBird pipeline</li> </ul>"},{"location":"#flexibility","title":"\ud83d\udd27 Flexibility","text":"<ul> <li>Support for various cosmological models (\u039bCDM, w\u2080w\u2090CDM with massive neutrinos)</li> <li>Full bias expansion including EFT corrections</li> <li>Easy integration with inference frameworks</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<pre><code>import jaxeffort\nimport jax.numpy as jnp\n\n# Load pre-trained emulators\nP0 = jaxeffort.trained_emulators[\"pybird_mnuw0wacdm\"][\"0\"]\nP2 = jaxeffort.trained_emulators[\"pybird_mnuw0wacdm\"][\"2\"]\nP4 = jaxeffort.trained_emulators[\"pybird_mnuw0wacdm\"][\"4\"]\n\n# Set cosmological and bias parameters\ncosmo_params = jnp.array([z, ln10As, ns, H0, ombh2, omch2, Mnu, w0, wa])\nbias_params = jnp.array([b1, b2, b3, b4, b5, b6, b7, f])\n\n# Compute growth factor\ncosmo = jaxeffort.W0WaCDMCosmology(...)\nD = cosmo.D_z(z)\n\n# Get multipoles\nP0_vals = P0.get_Pl(cosmo_params, bias_params, D)\nP2_vals = P2.get_Pl(cosmo_params, bias_params, D)\nP4_vals = P4.get_Pl(cosmo_params, bias_params, D)\n</code></pre>"},{"location":"#installation","title":"Installation","text":"<p>Install from PyPI:</p> <pre><code>pip install jaxeffort\n</code></pre> <p>Or install the latest development version:</p> <pre><code>git clone https://github.com/CosmologicalEmulators/jaxeffort\ncd jaxeffort\npip install -e .\n</code></pre>"},{"location":"#documentation-structure","title":"Documentation Structure","text":"<ul> <li>Usage Examples - Detailed examples and tutorials</li> <li>Data Management - Managing emulator data</li> <li>API Reference - Complete API documentation</li> <li>Contributing - Guidelines for contributors</li> </ul>"},{"location":"#citation","title":"Citation","text":"<p>If you use jaxeffort in your research, please cite:</p> <p>M. Bonici, G. D'Amico, J. Bel, C. Carbone, Effort.jl: a fast and differentiable emulator for the Effective Field Theory of the Large Scale Structure of the Universe, JCAP 09 (2025) 044</p>"},{"location":"api/","title":"API Reference","text":""},{"location":"api/#core-classes","title":"Core Classes","text":""},{"location":"api/#multipoleemulators","title":"MultipoleEmulators","text":"<p>The main class for computing galaxy power spectrum multipoles.</p> <p>Methods: - <code>get_Pl(cosmo_params, bias_params, D)</code>: Compute power spectrum multipole - <code>P11</code>: Access P11 component emulator - <code>Ploop</code>: Access Ploop component emulator - <code>Pct</code>: Access Pct component emulator</p>"},{"location":"api/#multipolenoiseemulator","title":"MultipoleNoiseEmulator","text":"<p>Extension of MultipoleEmulators with stochastic noise terms.</p> <p>Methods: - <code>get_Pl(cosmo_params, bias_params, D, stoch_params)</code>: Compute multipole with noise</p>"},{"location":"api/#cosmology-classes","title":"Cosmology Classes","text":""},{"location":"api/#w0wacdmcosmology","title":"W0WaCDMCosmology","text":"<p>w\u2080w\u2090CDM cosmology with massive neutrinos support.</p> <p>Parameters: - <code>ln10As</code>: Log amplitude of primordial power spectrum - <code>ns</code>: Spectral index - <code>h</code>: Hubble parameter - <code>omega_b</code>: Baryon density - <code>omega_c</code>: CDM density - <code>m_nu</code>: Neutrino mass [eV] - <code>w0</code>: Dark energy equation of state - <code>wa</code>: Dark energy equation of state evolution</p> <p>Methods: - <code>D_z(z)</code>: Growth factor at redshift z - <code>H_z(z)</code>: Hubble parameter at redshift z - <code>comoving_distance(z)</code>: Comoving distance to redshift z</p>"},{"location":"api/#loading-functions","title":"Loading Functions","text":""},{"location":"api/#load_multipole_emulator","title":"load_multipole_emulator","text":"<p>Load a multipole emulator from disk.</p> <pre><code>emulator = jaxeffort.load_multipole_emulator(path)\n</code></pre> <p>Parameters: - <code>path</code>: Path to emulator directory</p> <p>Returns: - <code>MultipoleEmulators</code> instance</p>"},{"location":"api/#force_update","title":"force_update","text":"<p>Force update of cached emulator data.</p> <pre><code>jaxeffort.force_update()\n</code></pre> <p>Downloads latest emulator data from Zenodo and updates local cache.</p>"},{"location":"api/#pre-trained-emulators","title":"Pre-trained Emulators","text":"<p>The following pre-trained emulators are available through <code>jaxeffort.trained_emulators</code>:</p>"},{"location":"api/#pybird_mnuw0wacdm","title":"pybird_mnuw0wacdm","text":"<p>Emulator trained on PyBird calculations with w\u2080w\u2090CDM cosmology and massive neutrinos.</p> <ul> <li>Multipoles available: 0 (monopole), 2 (quadrupole), 4 (hexadecapole)</li> <li>Redshift range: 0.5 - 2.0</li> <li>k range: 0.005 - 0.3 h/Mpc</li> <li>Parameters:</li> <li>Cosmological: z, ln10As, ns, H0, ombh2, omch2, Mnu, w0, wa</li> <li>Bias: b1, b2, b3, b4, b5, b6, b7, f</li> </ul> <p>Example usage: <pre><code>P0 = jaxeffort.trained_emulators[\"pybird_mnuw0wacdm\"][\"0\"]\nP2 = jaxeffort.trained_emulators[\"pybird_mnuw0wacdm\"][\"2\"]\nP4 = jaxeffort.trained_emulators[\"pybird_mnuw0wacdm\"][\"4\"]\n</code></pre></p>"},{"location":"api/#utility-functions","title":"Utility Functions","text":""},{"location":"api/#clear_cache","title":"clear_cache","text":"<p>Clear the local cache of downloaded emulator data.</p> <pre><code>jaxeffort.clear_cache()\n</code></pre> <p>Removes all cached emulator files from <code>~/.jaxeffort_data/</code>.</p>"},{"location":"contributing/","title":"Contributing to jaxeffort","text":"<p>We welcome contributions to jaxeffort! This document provides guidelines for contributing to the project.</p>"},{"location":"contributing/#development-setup","title":"Development Setup","text":"<ol> <li>Fork the repository on GitHub</li> <li> <p>Clone your fork locally:    <pre><code>git clone https://github.com/your-username/jaxeffort.git\ncd jaxeffort\n</code></pre></p> </li> <li> <p>Install in development mode with dependencies:    <pre><code>poetry install --with dev\n</code></pre></p> </li> </ol>"},{"location":"contributing/#development-workflow","title":"Development Workflow","text":""},{"location":"contributing/#running-tests","title":"Running Tests","text":"<p>Run the test suite using pytest:</p> <pre><code># Run all tests\npoetry run pytest\n\n# Run with coverage\npoetry run pytest --cov=jaxeffort\n\n# Run specific test file\npoetry run pytest tests/test_emulator_loading.py\n\n# Run tests in parallel\npoetry run pytest -n auto\n</code></pre>"},{"location":"contributing/#code-quality","title":"Code Quality","text":"<p>Before submitting a pull request, ensure your code passes quality checks:</p> <pre><code># Format code with Black\npoetry run black jaxeffort/ tests/\n\n# Sort imports with isort\npoetry run isort jaxeffort/ tests/\n\n# Lint with ruff\npoetry run ruff check jaxeffort/ tests/\n\n# Fix linting issues automatically\npoetry run ruff check --fix jaxeffort/ tests/\n</code></pre>"},{"location":"contributing/#building-documentation","title":"Building Documentation","text":"<p>To build and preview the documentation locally:</p> <pre><code># Install documentation dependencies\npip install mkdocs-material mkdocstrings[python] mike\n\n# Generate documentation plots\npython generate_doc_plots.py\n\n# Serve documentation locally\nmkdocs serve\n\n# Build documentation\nmkdocs build\n</code></pre>"},{"location":"contributing/#pull-request-process","title":"Pull Request Process","text":"<ol> <li> <p>Create a new branch for your feature or bug fix:    <pre><code>git checkout -b feature/your-feature-name\n</code></pre></p> </li> <li> <p>Make your changes and commit them with descriptive messages:    <pre><code>git add .\ngit commit -m \"Add feature: description of your changes\"\n</code></pre></p> </li> <li> <p>Push to your fork:    <pre><code>git push origin feature/your-feature-name\n</code></pre></p> </li> <li> <p>Open a pull request on GitHub</p> </li> </ol>"},{"location":"contributing/#pr-requirements","title":"PR Requirements","text":"<ul> <li>All tests must pass</li> <li>Code must be formatted with Black</li> <li>New features should include tests</li> <li>Documentation should be updated if applicable</li> <li>Commit messages should be clear and descriptive</li> </ul>"},{"location":"contributing/#code-style","title":"Code Style","text":"<ul> <li>Follow PEP 8 guidelines</li> <li>Use type hints where appropriate</li> <li>Write docstrings for all public functions and classes (Google style)</li> <li>Keep line length to 100 characters</li> <li>Use meaningful variable names</li> </ul>"},{"location":"contributing/#testing-guidelines","title":"Testing Guidelines","text":"<ul> <li>Write tests for new features</li> <li>Maintain or improve code coverage</li> <li>Use pytest fixtures for shared test data</li> <li>Test edge cases and error conditions</li> </ul> <p>Example test structure:</p> <pre><code>import pytest\nimport jaxeffort\n\ndef test_multipole_emulator_loading():\n    \"\"\"Test that multipole emulators load correctly.\"\"\"\n    emulator = jaxeffort.load_multipole_emulator(\"path/to/emulator\")\n    assert emulator is not None\n    assert hasattr(emulator, 'get_Pl')\n\ndef test_invalid_parameters():\n    \"\"\"Test handling of invalid parameters.\"\"\"\n    with pytest.raises(ValueError):\n        jaxeffort.W0WaCDMCosmology(h=-0.5)  # Invalid Hubble parameter\n</code></pre>"},{"location":"contributing/#reporting-issues","title":"Reporting Issues","text":"<p>When reporting issues, please include:</p> <ul> <li>A clear description of the problem</li> <li>Steps to reproduce the issue</li> <li>Expected behavior</li> <li>Actual behavior</li> <li>Python version and key package versions</li> <li>Any relevant error messages or tracebacks</li> </ul>"},{"location":"contributing/#feature-requests","title":"Feature Requests","text":"<p>We welcome feature requests! Please:</p> <ul> <li>Check if the feature has already been requested</li> <li>Provide a clear use case</li> <li>Describe the expected behavior</li> <li>Consider implementing it yourself and submitting a PR</li> </ul>"},{"location":"contributing/#community","title":"Community","text":"<ul> <li>Follow the Code of Conduct</li> <li>Be respectful and constructive in discussions</li> <li>Help others when you can</li> </ul>"},{"location":"contributing/#release-process","title":"Release Process","text":"<p>Releases are managed by maintainers and follow semantic versioning:</p> <ul> <li>MAJOR version for incompatible API changes</li> <li>MINOR version for backwards-compatible functionality additions</li> <li>PATCH version for backwards-compatible bug fixes</li> </ul>"},{"location":"contributing/#questions","title":"Questions?","text":"<p>If you have questions about contributing, feel free to:</p> <ul> <li>Open a discussion on GitHub</li> <li>Contact the maintainers</li> <li>Check existing issues and discussions</li> </ul> <p>Thank you for contributing to jaxeffort!</p>"},{"location":"usage_examples/","title":"Usage Examples","text":"<p>This page provides detailed examples of using jaxeffort for galaxy power spectrum emulation.</p>"},{"location":"usage_examples/#basic-usage","title":"Basic Usage","text":""},{"location":"usage_examples/#loading-emulators","title":"Loading Emulators","text":"<p>jaxeffort comes with pre-trained emulators that can be loaded easily:</p> <pre><code>import jaxeffort\nimport jax.numpy as jnp\n\n# Load multipole emulators\nP0 = jaxeffort.trained_emulators[\"pybird_mnuw0wacdm\"][\"0\"]  # Monopole\nP2 = jaxeffort.trained_emulators[\"pybird_mnuw0wacdm\"][\"2\"]  # Quadrupole\nP4 = jaxeffort.trained_emulators[\"pybird_mnuw0wacdm\"][\"4\"]  # Hexadecapole\n</code></pre>"},{"location":"usage_examples/#computing-power-spectra","title":"Computing Power Spectra","text":"<pre><code># Define cosmological parameters\ncosmo_params = jnp.array([\n    1.2,    # z (redshift)\n    3.1,    # ln10As\n    0.96,   # ns\n    67.0,   # H0\n    0.022,  # ombh2\n    0.12,   # omch2\n    0.06,   # Mnu (neutrino mass in eV)\n    -1.0,   # w0\n    0.0     # wa\n])\n\n# Define bias parameters\nbias_params = jnp.array([\n    1.0,    # b1\n    1.0,    # b2\n    1.0,    # b3\n    1.0,    # b4\n    1.0,    # b5\n    1.0,    # b6\n    1.0,    # b7\n    1.0     # f (growth rate)\n])\n\n# Setup cosmology for growth factor calculation\ncosmo = jaxeffort.W0WaCDMCosmology(\n    ln10As=cosmo_params[1],\n    ns=cosmo_params[2],\n    h=cosmo_params[3]/100,\n    omega_b=cosmo_params[4],\n    omega_c=cosmo_params[5],\n    m_nu=cosmo_params[6],\n    w0=cosmo_params[7],\n    wa=cosmo_params[8]\n)\n\n# Compute growth factor at redshift z\nD = cosmo.D_z(cosmo_params[0])\n\n# Compute multipoles\nP0_vals = P0.get_Pl(cosmo_params, bias_params, D)\nP2_vals = P2.get_Pl(cosmo_params, bias_params, D)\nP4_vals = P4.get_Pl(cosmo_params, bias_params, D)\n\n# Get k-values\nk = P0.P11.k_grid[:, 1]\n</code></pre>"},{"location":"usage_examples/#automatic-differentiation","title":"Automatic Differentiation","text":"<p>One of the key features of jaxeffort is its compatibility with JAX's automatic differentiation:</p>"},{"location":"usage_examples/#computing-jacobians","title":"Computing Jacobians","text":"<pre><code>import jax\n\n# Define function for P0 that depends only on cosmological parameters\ndef P0_func(theta):\n    return P0.get_Pl(theta, bias_params, D)\n\n# Compute Jacobian with respect to cosmological parameters\njacobian_P0 = jax.jacfwd(P0_func)(cosmo_params)\nprint(f\"Jacobian shape: {jacobian_P0.shape}\")  # (74, 9) - 74 k-bins, 9 parameters\n\n# Plot sensitivity to specific parameters\nimport matplotlib.pyplot as plt\n\nplt.figure(figsize=(12, 5))\nplt.subplot(1, 2, 1)\nplt.plot(k, jacobian_P0[:, 4], label=r'$\\omega_b$')\nplt.plot(k, jacobian_P0[:, 5], label=r'$\\omega_c$')\nplt.xlabel(r'$k$ [h/Mpc]')\nplt.ylabel(r'$\\partial P_0/\\partial\\alpha$')\nplt.legend()\nplt.title('Sensitivity to Baryon and CDM Densities')\n\nplt.subplot(1, 2, 2)\nplt.plot(k, jacobian_P0[:, 1], label=r'$\\ln(10^{10}A_s)$')\nplt.plot(k, jacobian_P0[:, 2], label=r'$n_s$')\nplt.xlabel(r'$k$ [h/Mpc]')\nplt.ylabel(r'$\\partial P_0/\\partial\\alpha$')\nplt.legend()\nplt.title('Sensitivity to Primordial Parameters')\nplt.tight_layout()\nplt.show()\n</code></pre>"},{"location":"usage_examples/#computing-hessians","title":"Computing Hessians","text":"<pre><code># Compute second derivatives (Hessian)\nhessian_P0 = jax.jacfwd(jax.jacrev(P0_func))(cosmo_params)\nprint(f\"Hessian shape: {hessian_P0.shape}\")  # (74, 9, 9)\n</code></pre>"},{"location":"usage_examples/#visualization","title":"Visualization","text":""},{"location":"usage_examples/#plotting-multipoles","title":"Plotting Multipoles","text":"<pre><code>import matplotlib.pyplot as plt\n\nplt.figure(figsize=(10, 6))\nplt.plot(k, k * P0_vals, label=r'$\\ell=0$ (Monopole)', linewidth=2)\nplt.plot(k, k * P2_vals, label=r'$\\ell=2$ (Quadrupole)', linewidth=2)\nplt.plot(k, k * P4_vals, label=r'$\\ell=4$ (Hexadecapole)', linewidth=2)\nplt.xlabel(r'$k$ [h/Mpc]', fontsize=12)\nplt.ylabel(r'$k P_\\ell(k)$ [Mpc$^2$/h$^2$]', fontsize=12)\nplt.legend(fontsize=11)\nplt.grid(True, alpha=0.3)\nplt.title('Galaxy Power Spectrum Multipoles', fontsize=14)\nplt.show()\n</code></pre>"},{"location":"usage_examples/#advanced-usage","title":"Advanced Usage","text":""},{"location":"usage_examples/#batch-processing","title":"Batch Processing","text":"<p>jaxeffort leverages JAX's vectorization capabilities for efficient batch processing:</p> <pre><code>import jax.numpy as jnp\nfrom jax import vmap\n\n# Create batch of parameters\nn_samples = 100\ncosmo_params_batch = jnp.array([\n    jnp.random.uniform(low=0.5, high=2.0, shape=(n_samples,)),     # z\n    jnp.random.uniform(low=2.8, high=3.3, shape=(n_samples,)),     # ln10As\n    jnp.random.uniform(low=0.9, high=1.0, shape=(n_samples,)),     # ns\n    jnp.random.uniform(low=60, high=75, shape=(n_samples,)),       # H0\n    jnp.random.uniform(low=0.02, high=0.024, shape=(n_samples,)),  # ombh2\n    jnp.random.uniform(low=0.10, high=0.14, shape=(n_samples,)),   # omch2\n    jnp.random.uniform(low=0.0, high=0.2, shape=(n_samples,)),     # Mnu\n    jnp.ones(n_samples) * (-1.0),                                  # w0\n    jnp.zeros(n_samples)                                           # wa\n]).T\n\n# Vectorized computation\ndef compute_single(params):\n    return P0.get_Pl(params, bias_params, D)\n\ncompute_batch = vmap(compute_single)\nP0_batch = compute_batch(cosmo_params_batch)\nprint(f\"Batch output shape: {P0_batch.shape}\")  # (100, 74)\n</code></pre>"},{"location":"usage_examples/#custom-cosmologies","title":"Custom Cosmologies","text":"<p>You can use different cosmology classes provided by jaxeffort:</p> <pre><code># \u039bCDM cosmology\ncosmo_lcdm = jaxeffort.LCDMCosmology(\n    ln10As=3.1,\n    ns=0.96,\n    h=0.67,\n    omega_b=0.022,\n    omega_c=0.12,\n    m_nu=0.06\n)\n\n# w0waCDM cosmology\ncosmo_w0wa = jaxeffort.W0WaCDMCosmology(\n    ln10As=3.1,\n    ns=0.96,\n    h=0.67,\n    omega_b=0.022,\n    omega_c=0.12,\n    m_nu=0.06,\n    w0=-0.9,\n    wa=-0.1\n)\n</code></pre>"},{"location":"usage_examples/#performance-tips","title":"Performance Tips","text":"<ol> <li> <p>JIT Compilation: Use JAX's JIT compilation for repeated evaluations:    <pre><code>from jax import jit\n\n@jit\ndef fast_compute(params, bias):\n    return P0.get_Pl(params, bias, D)\n</code></pre></p> </li> <li> <p>GPU Acceleration: jaxeffort automatically uses GPU if available:    <pre><code>import jax\nprint(f\"Available devices: {jax.devices()}\")\n</code></pre></p> </li> <li> <p>Precision Control: Control float precision for memory/speed trade-offs:    <pre><code>from jax import config\nconfig.update(\"jax_enable_x64\", True)  # Use float64\n</code></pre></p> </li> </ol>"},{"location":"examples/data_management/","title":"Data Management","text":"<p>This guide explains how to manage emulator data in jaxeffort.</p>"},{"location":"examples/data_management/#default-data-location","title":"Default Data Location","text":"<p>jaxeffort stores emulator data in a cache directory:</p> <ul> <li>Linux/Mac: <code>~/.jaxeffort_data/</code></li> <li>Windows: <code>%USERPROFILE%\\.jaxeffort_data\\</code></li> </ul>"},{"location":"examples/data_management/#automatic-data-download","title":"Automatic Data Download","text":"<p>When you first use jaxeffort, it automatically downloads the required emulator data:</p> <pre><code>import jaxeffort\n\n# This triggers automatic download on first use\nP0 = jaxeffort.trained_emulators[\"pybird_mnuw0wacdm\"][\"0\"]\n</code></pre>"},{"location":"examples/data_management/#force-update","title":"Force Update","text":"<p>To ensure you have the latest version of the emulator data:</p> <pre><code>import jaxeffort\n\n# Force re-download of emulator data\njaxeffort.force_update()\n</code></pre> <p>This will: 1. Clear the existing cache directory 2. Download the latest emulator data from Zenodo 3. Extract and organize the data</p>"},{"location":"examples/data_management/#loading-custom-emulators","title":"Loading Custom Emulators","text":"<p>You can load emulators from custom locations:</p> <pre><code>import jaxeffort\n\n# Load from a specific directory\ncustom_emulator = jaxeffort.load_multipole_emulator(\"/path/to/your/emulator/\")\n</code></pre>"},{"location":"examples/data_management/#expected-directory-structure","title":"Expected Directory Structure","text":"<p>Custom emulator directories should have the following structure:</p> <pre><code>emulator_directory/\n\u251c\u2500\u2500 11/                  # P11 component\n\u2502   \u251c\u2500\u2500 weights.npy      # Neural network weights\n\u2502   \u251c\u2500\u2500 inminmax.npy     # Input normalization\n\u2502   \u251c\u2500\u2500 outminmax.npy    # Output normalization\n\u2502   \u251c\u2500\u2500 nn_setup.json    # Network architecture\n\u2502   \u251c\u2500\u2500 k.npy           # k-grid points\n\u2502   \u2514\u2500\u2500 postprocessing.py\n\u251c\u2500\u2500 loop/               # Ploop component\n\u2502   \u251c\u2500\u2500 weights.npy\n\u2502   \u251c\u2500\u2500 inminmax.npy\n\u2502   \u251c\u2500\u2500 outminmax.npy\n\u2502   \u251c\u2500\u2500 nn_setup.json\n\u2502   \u251c\u2500\u2500 k.npy\n\u2502   \u2514\u2500\u2500 postprocessing.py\n\u251c\u2500\u2500 ct/                 # Pct component\n\u2502   \u251c\u2500\u2500 weights.npy\n\u2502   \u251c\u2500\u2500 inminmax.npy\n\u2502   \u251c\u2500\u2500 outminmax.npy\n\u2502   \u251c\u2500\u2500 nn_setup.json\n\u2502   \u251c\u2500\u2500 k.npy\n\u2502   \u2514\u2500\u2500 postprocessing.py\n\u2514\u2500\u2500 biascontraction.py  # Bias contraction matrix\n</code></pre>"},{"location":"examples/data_management/#data-storage-requirements","title":"Data Storage Requirements","text":"<ul> <li>Per multipole: ~50 MB</li> <li>Full set (\u2113=0,2,4): ~150 MB</li> <li>With all components: ~200 MB total</li> </ul>"},{"location":"examples/data_management/#offline-usage","title":"Offline Usage","text":"<p>For offline usage, ensure data is downloaded beforehand:</p> <pre><code>import jaxeffort\n\n# Download data while online\njaxeffort.force_update()\n\n# Later, offline usage will work\nP0 = jaxeffort.trained_emulators[\"pybird_mnuw0wacdm\"][\"0\"]\n</code></pre>"},{"location":"examples/data_management/#environment-variables","title":"Environment Variables","text":"<p>You can customize the data directory using environment variables:</p> <pre><code>export JAXEFFORT_DATA_DIR=/custom/path/to/data\n</code></pre> <p>Then in Python:</p> <pre><code>import os\nos.environ['JAXEFFORT_DATA_DIR'] = '/custom/path/to/data'\nimport jaxeffort\n</code></pre>"},{"location":"examples/data_management/#troubleshooting","title":"Troubleshooting","text":""},{"location":"examples/data_management/#clear-cache","title":"Clear Cache","text":"<p>If you encounter issues, try clearing the cache:</p> <pre><code>import shutil\nimport os\n\ncache_dir = os.path.expanduser(\"~/.jaxeffort_data\")\nif os.path.exists(cache_dir):\n    shutil.rmtree(cache_dir)\n\n# Re-import to trigger fresh download\nimport jaxeffort\njaxeffort.force_update()\n</code></pre>"},{"location":"examples/data_management/#verify-data-integrity","title":"Verify Data Integrity","text":"<p>Check that all required files are present:</p> <pre><code>import os\nfrom pathlib import Path\n\ndef verify_emulator_data(path):\n    \"\"\"Verify emulator data structure.\"\"\"\n    required_files = {\n        '11': ['weights.npy', 'inminmax.npy', 'outminmax.npy',\n               'nn_setup.json', 'k.npy', 'postprocessing.py'],\n        'loop': ['weights.npy', 'inminmax.npy', 'outminmax.npy',\n                 'nn_setup.json', 'k.npy', 'postprocessing.py'],\n        'ct': ['weights.npy', 'inminmax.npy', 'outminmax.npy',\n              'nn_setup.json', 'k.npy', 'postprocessing.py']\n    }\n\n    path = Path(path)\n    missing = []\n\n    for component, files in required_files.items():\n        comp_dir = path / component\n        if not comp_dir.exists():\n            missing.append(f\"Directory: {component}/\")\n            continue\n\n        for file in files:\n            if not (comp_dir / file).exists():\n                missing.append(f\"File: {component}/{file}\")\n\n    if path / 'biascontraction.py':\n        if not (path / 'biascontraction.py').exists():\n            missing.append(\"File: biascontraction.py\")\n\n    if missing:\n        print(\"Missing files:\")\n        for item in missing:\n            print(f\"  - {item}\")\n        return False\n    else:\n        print(\"\u2713 All required files present\")\n        return True\n\n# Verify default emulator\nverify_emulator_data(\"~/.jaxeffort_data/emulators/pybird_mnuw0wacdm/0\")\n</code></pre>"},{"location":"examples/data_management/#manual-download","title":"Manual Download","text":"<p>If automatic download fails, you can manually download the data:</p> <ol> <li>Download from Zenodo: [DOI: 10.5281/zenodo.xxxxx]</li> <li>Extract to <code>~/.jaxeffort_data/emulators/</code></li> <li>Verify structure matches expected format</li> </ol>"},{"location":"examples/data_management/#data-sources","title":"Data Sources","text":"<p>The pre-trained emulators are hosted on: - Zenodo: Permanent DOI-based archive - GitHub Releases: Alternative download location</p>"},{"location":"examples/data_management/#citation","title":"Citation","text":"<p>When using the pre-trained emulator data, please cite the data repository:</p> <pre><code>@dataset{jaxeffort_data,\n  author = {Bonici, Marco and D'Amico, Guido and Bel, Julien and Carbone, Carmelita},\n  title = {jaxeffort Pre-trained Emulator Data},\n  year = {2025},\n  publisher = {Zenodo},\n  doi = {10.5281/zenodo.xxxxx}\n}\n</code></pre>"}]}